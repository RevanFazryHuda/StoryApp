const CACHE_NAME="dicoding-story-app-v1",urlsToCache=["/","/index.html","/bundle.js","/images/favicon.ico","/images/logo.png","/manifest.json"];self.addEventListener("install",(e=>{console.log("Service Worker: Installing..."),self.skipWaiting(),e.waitUntil(caches.open(CACHE_NAME).then((e=>(console.log("Service Worker: Caching files"),e.addAll(urlsToCache)))).catch((e=>{console.error("Service Worker: Installation failed:",e)})))})),self.addEventListener("activate",(e=>{console.log("Service Worker: Activating..."),e.waitUntil(Promise.all([caches.keys().then((e=>Promise.all(e.filter((e=>e!==CACHE_NAME)).map((e=>caches.delete(e)))))),self.clients.claim()]))})),self.addEventListener("message",(e=>{e.data&&"SKIP_WAITING"===e.data.type&&(console.log("Service Worker: Received SKIP_WAITING message"),self.skipWaiting())})),self.addEventListener("fetch",(e=>{const o=new URL(e.request.url);if(!o.protocol.startsWith("http"))return console.log("Service Worker: Skipping non-http request",e.request.url),void e.respondWith(fetch(e.request));o.pathname.startsWith("/stories")?e.respondWith(fetch(e.request).catch((e=>{throw console.log("Service Worker: Fetch failed for stories:",e),e}))):"api.maptiler.com"!==o.hostname?(console.log("Service Worker: Fetching",e.request.url),e.respondWith(caches.match(e.request).then((o=>o?(console.log("Service Worker: Found in cache",e.request.url),o):(console.log("Service Worker: Fetching resource",e.request.url),fetch(e.request).then((o=>{if(!o||200!==o.status||"basic"!==o.type)return o;const t=o.clone();return caches.open(CACHE_NAME).then((o=>{o.put(e.request,t)})).catch((o=>{console.error("Service Worker: Failed to cache",e.request.url,o)})),o})).catch((o=>{throw console.error("Service Worker: Fetch failed",e.request.url,o),o}))))))):e.respondWith(caches.open(CACHE_NAME).then((t=>fetch(e.request).then((o=>(200===o.status&&t.put(e.request,o.clone()),o))).catch((t=>(console.log("Service Worker: Fetch failed for map tiles, checking cache",o),caches.match(e.request).then((e=>{if(e)return console.log("Service Worker: Serving cached map tiles",o),e;throw t}))))))))})),self.addEventListener("push",(e=>{console.log("Service Worker: Push received");let o={title:"New Story",body:"A new story has been added!",url:"/"};if(e.data)try{o=e.data.json()}catch(e){console.error("Service Worker: Failed to parse push data",e)}const t={body:o.body,icon:"/images/logo.png",badge:"/images/favicon.ico",vibrate:[200,100,200],data:{url:o.url||"/"}};e.waitUntil(self.checkNotificationPermission().then((e=>e?self.registration.showNotification(o.title,t):(console.warn("Service Worker: Notification permission not granted, skipping notification"),Promise.resolve()))).catch((e=>{console.error("Service Worker: Gagal menampilkan notifikasi:",e)})))})),self.checkNotificationPermission=function(){return new Promise((e=>{if("undefined"==typeof Notification)return console.log("Service Worker: Notification API tidak tersedia"),void e(!1);console.log("Service Worker: Status izin notifikasi:",Notification.permission),e("granted"===Notification.permission)}))},self.addEventListener("notificationclick",(e=>{console.log("Service Worker: Notification clicked"),e.notification.close(),e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((o=>{const t=e.notification.data.url||"/";for(const e of o)if(e.url===t&&"focus"in e)return e.focus();if(clients.openWindow)return clients.openWindow(t).catch((e=>{console.error("Service Worker: Gagal membuka jendela:",e)}))})).catch((e=>{console.error("Service Worker: Gagal menangani klik notifikasi:",e)})))}));